# #######################################
# Usage examples:
#
# Fetch the submodules needed for compilation:
#   make -f Makefile.standalone fetch_source
#
# Compile example application and its dependencies:
#   make -f Makefile.standalone mbed-client-linux-example CC=gcc
# #######################################
ifeq ($(OS),Windows_NT)
$(error This does not work with Windows, use Unix/Linux/Mac OS X)
endif

include sources.mk
include include_dirs.mk

ifeq (,$(CONFIG))
CONFIG:=generic
endif

ifeq (,$(V))
VERBOSE:= @
endif

# Set the target path where submodules will be deployed to,
# functionally similar than the yotta_modules.
SUBMODULE_BASE_PATH ?= $(CURDIR)/standalone_modules

#CliApp type (thread_sed, thread_br, thread_thci, etc...)
ifeq (,$(CLINODE_TYPE))
CLINODE_TYPE=
endif

# List of libraries to build with Makefile.standalone
LIBS := \
	mbed-client \
	mbed-client-linux \
	mbed-trace \

# these will be downloaded, but built with special rules
SPECIAL_LIBS := \
    mbedtls \
    nanostack-libservice \

override CFLAGS += $(addprefix -I$(SUBMODULE_BASE_PATH)/, $(INCLUDE_DIRS))
override CXXFLAGS += $(addprefix -I$(SUBMODULE_BASE_PATH)/, $(INCLUDE_DIRS))

# Create a list of objects and depencies to build
COMMON_OBJS := $(SRCS:.cpp=.o)
COMMON_DEPS += $(SRCS:.cpp=.d)

# Include depencies
-include $(COMMON_DEPS)

#
# Define compiler toolchain
#
include toolchain_rules.mk

# Get the generic rules for fetching source and building submodules
include standalone_rules.mk

$(eval $(call generate_rules,$(LIB),$(SRCS)))

LDFLAGS += -L$(SUBMODULE_BASE_PATH)/mbed-client $(addsuffix _$(CC), -lmbedclient)
LDFLAGS += -L$(SUBMODULE_BASE_PATH)/mbed-client-c $(addsuffix _$(CC), -lnsdl)
LDFLAGS += -L$(SUBMODULE_BASE_PATH)/mbed-client-linux $(addsuffix _$(CC), -lmbed-client-linux)
LDFLAGS += -L$(SUBMODULE_BASE_PATH)/mbed-client-mbed-tls $(addsuffix _$(CC), -lmbed-client-mbed-tls)
LDFLAGS += -L$(SUBMODULE_BASE_PATH)/mbedtls/library -lmbedtls -lmbedx509  -lmbedcrypto 
LDFLAGS += -lpthread -lrt


.PHONY: all 
all: $(SUBMODULE_BASE_PATH) $(TARGET_MODULES) $(BUILDDIRS) mbedtls-libs mbed-client-linux-example
	@echo Build OK!

.PHONY: clean
clean: $(CLEANDIRS) mbed-client-linux-example-clean

mbed-client-linux-example-clean:
	-$(RM) $(COMMON_OBJS)
	-$(RM) mbed-client-linux-example

.PHONY: mbedtls-libs
mbedtls-libs:
	make -C $(SUBMODULE_BASE_PATH)/mbedtls -f Makefile CFLAGS="-DMBEDTLS_CONFIG_FILE='<../../../config-thread-mbed-client.h>'" lib CC=$(CC) CPU=$(CPU)

# create the submodule dir if one does not exist
$(SUBMODULE_BASE_PATH):
	mkdir -p $(SUBMODULE_BASE_PATH)

# note CXX is needed for linking in the C++ code from mbed-client
mbed-client-linux-example: $(TARGET_MODULES) $(BUILDDIRS) $(COMMON_OBJS) mbedtls-libs
	@echo 'Linking: $@'
	$(CXX) -o $@ $(COMMON_OBJS) $(LDFLAGS)
	@echo Done

TARGET_MODULES := $(addprefix $(SUBMODULE_BASE_PATH)/, $(LIBS))
TARGET_MODULES += $(addprefix $(SUBMODULE_BASE_PATH)/, $(SPECIAL_LIBS))

$(TARGET_MODULES): | $(SUBMODULE_BASE_PATH)


# perform a git clone of the submodules listed in $(LIBS)
.PHONY: fetch_source
fetch_source: $(TARGET_MODULES) $(FETCH_SUB_MODULES)


